import time

class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        return None  # Si la pila está vacía

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

    def search(self, key):
        """Busca un elemento en la pila y devuelve True si lo encuentra, False si no."""
        for item in self.items:
            if item == key:
                return True
        return False

# Función para encontrar un valor de n que tome al menos 5 segundos en insertar
def find_n_for_5_seconds():
    n = 1000
    while True:
        stack = Stack()
        start_time = time.time()
        for i in range(n):
            stack.push(i)
        elapsed_time = time.time() - start_time
        if elapsed_time >= 5:
            break
        n += 1000
    return n

# Encontrar n óptimo
n = find_n_for_5_seconds()
print(f"Valor de n encontrado: {n}")

# Crear cinco stacks con tamaños n, 2n, 3n, 4n, 5n
sizes = [n, 2*n, 3*n, 4*n, 5*n]
stacks = {}

for size in sizes:
    stack = Stack()
    for i in range(size):
        stack.push(i)
    stacks[size] = stack

print("Stacks instanciados con los tamaños correspondientes.")

# 🔹 Probar el método search
test_stack = stacks[n]
print("Prueba de búsqueda:")
print(f"¿Existe el elemento {n//2}? ->", test_stack.search(n//2))  # Debería ser True
print(f"¿Existe el elemento -1? ->", test_stack.search(-1))  # Debería ser False



